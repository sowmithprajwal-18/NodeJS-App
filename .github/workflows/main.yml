name: Publish Docker image 

on:
  push:
    branches: ['main']

jobs:
  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the repository
      - name: Check out the repo
        uses: actions/checkout@v3
      
      # Step 2: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      # Step 3: Extract metadata (tags, labels) for Docker
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: sowm18/Node-JS
      
      # Step 4: Save state (example: saving a build timestamp)
      - name: Save build timestamp
        run: |
          build_time=$(date +%s)
          echo "build_time=$build_time" >> $GITHUB_STATE
      
      # Step 5: Set output (example: setting a custom Docker image tag)
      - name: Set Docker tag output
        id: set-tag
        run: |
          docker_tag=custom-tag-${{ steps.meta.outputs.tags }}
          echo "docker_tag=$docker_tag" >> $GITHUB_OUTPUT
      
      # Step 6: Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.set-tag.outputs.docker_tag }}
          labels: ${{ steps.meta.outputs.labels }}
      
      # Step 7: Use saved state (for demonstration purposes)
      - name: Use saved build timestamp
        run: |
          echo "Build timestamp: ${{ steps.set-tag.outputs.build_time }}"
